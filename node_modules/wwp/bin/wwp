#!/usr/bin/env node

/**
 * 
 * config of .wwprc:
 * 
 * @param bundle: (required) the transformed bundle of .we file.
 * @param componentsPath: (optional) path of components, such like `./html5/render/browser/extend/components`
 * @param apisPath: (optional) path of API modules, such like `./html5/render/browser/extend/api`
 * @param packer: (optional) where to put the generated packer.js, such like `./html5/render/browser/extend/packer.js`
 * @param components: a list of components that you choose to be packed.
 * @param apis: a list of API modules that you choose to be packed.
 * @param loaders: a list of extra loaders that you choose to e packed.
 * @param npm: a list of extensions (components and apis modules) and required from npm instead of local path.
 *   a demo for specifying a cnpm module:
 *   - "npm": [{
 *     "platform": "cnpm", // or "yarn" if you have the yarn installed in global.
 *     "modules": {
 *       "weex-picker-web": "*"
 *     }
 *   }]
 */

var exec = require('child_process').exec
var cmd = require('commander')
var fs = require('fs')
var path = require('path')

var log = require('../lib/log')
var wwp = require('../lib')

var root = process.cwd()

var DEFAULT_CONFIG_PATH = '.wwprc'

var DEFAULT_COMPONENTS_PATH = './html5/browser/extend/components'
var DEFAULT_APIS_PATH = './html5/browser/extend/api'
var DEFAULT_LOADERS_PATH = './html5/browser/extend/loader'
var DEFAULT_PACKER = './html5/browser/extend/packer.js'
var DEFAULT_BUNDLE_MARK = '{{bundle}}'
var DEFAULT_BUNDLE_NAME = 'bundle'
var DEFAULT_BUNDLE_DIST = './dist'

function normalizeUrlProtocol (url) {
  if (url.match(/^\/\//)) {
    url = 'http:' + url
  }
  return url
}

function isLocalPath (p) {
  return !p.match(/(?:https?\:)?\/\//)
}

function normalizePath (p) {
  if (isLocalPath) {
    return path.resolve(root, p)
  } else {
    return normalizeUrlProtocol(p)
  }
}

// cli

cmd
  .version(require('../package.json').version)
  .usage('[options]')
  .option('-d, --debug', 'to show debug logs')
  .option('-c, --config <configFilePath>', 'specify the config file path')
  .parse(process.argv)

log = log(cmd.debug).log

// read config

var configPath = path.resolve(root, cmd.config || DEFAULT_CONFIG_PATH)
log('configPath:', configPath)

var config = JSON.parse(fs.readFileSync(configPath, 'utf-8'))
config = JSON.parse(fs.readFileSync(configPath))
config.debug = cmd.debug

config.componentsPath = path.resolve(root, config.componentsPath || DEFAULT_COMPONENTS_PATH)
config.apisPath = path.resolve(root, config.apisPath || DEFAULT_APIS_PATH)
config.loadersPath = path.resolve(root, config.loadersPath || DEFAULT_LOADERS_PATH)
config.packer = path.resolve(root, config.packer || DEFAULT_PACKER)
config.bundle && !config.bundle.mark && (config.bundle.mark = DEFAULT_BUNDLE_MARK)
config.bundle && !config.bundle.name && (config.bundle.name = DEFAULT_BUNDLE_NAME)
config.bundle && (config.bundle.dist = path.resolve(root, config.bundle.dist || DEFAULT_BUNDLE_DIST))

var bundle = config.bundle
bundle && bundle.we && (bundle.we = normalizePath(bundle.we))
bundle && bundle.js && (bundle.js = normalizePath(bundle.js))

log('config:\n', JSON.stringify(config, null, 2))

wwp.pack(config)
