var should = require('chai').should(),
	httpurl = require('../build/httpurl.common.js');

var clone = function(obj) {
	var res = {};
	for (var k in obj) {
		if (obj.hasOwnProperty(k)) {
			res[k] = obj[k];
		}
	}
	return res;
};

describe('get url components', function() {

	describe('https://jhs.m.taobao.com/m/index.htm?locate=icon-2&spm=a215s.7406091.1.icon-2&scm=2027.1.3.1001#!all', function() {

		var url = 'https://jhs.m.taobao.com/m/index.htm?locate=icon-2&spm=a215s.7406091.1.icon-2&scm=2027.1.3.1001#!all',
			parsedUrl, protocol, username, password, hostname, port, pathname, search, hash, params;

		before(function() {
			parsedUrl = new httpurl(url);
			protocol = parsedUrl.protocol;
			username = parsedUrl.username;
			password = parsedUrl.password;
			hostname = parsedUrl.hostname;
			port = parsedUrl.port;
			pathname = parsedUrl.pathname;
			search = parsedUrl.search;
			hash = parsedUrl.hash;
			params = parsedUrl.params;
		})

		it('should parse protocol', function() {
			protocol.should.equal('https:');
		});

		it('should parse username', function() {
			username.should.equal('');
		});

		it('should parse password', function() {
			password.should.equal('');
		});

		it('should parse hostname', function() {
			hostname.should.equal('jhs.m.taobao.com');
		});

		it('should parse port', function() {
			port.should.equal('');
		});

		it('should parse pathname', function() {
			pathname.should.equal('/m/index.htm');
		});

		it('should parse search', function() {
			search.should.equal('?locate=icon-2&spm=a215s.7406091.1.icon-2&scm=2027.1.3.1001');
		});

		it('should parse hash', function() {
			hash.should.equal('#!all');
		});

		it('should parse params', function() {
			params.should.deep.equal({
				locate: 'icon-2',
				spm: 'a215s.7406091.1.icon-2',
				scm: '2027.1.3.1001'
			});
		});

		it('should serialized with toString', function() {
			parsedUrl.toString().should.equal(url);
		});

	});

	describe('http://anotherUser:anotherPass@m.taobao.com:8086/m/index.htm?locate=icon-2&spm=a215s.7406091.1.icon-2&scm=2027.1.3.1001#!all', function() {

		var url = 'http://anotherUser:anotherPass@m.taobao.com:8086/m/index.htm?locate=icon-2&spm=a215s.7406091.1.icon-2&scm=2027.1.3.1001#!all',
			parsedUrl, protocol, username, password, hostname, port, pathname, search, hash, params;

		before(function() {
			parsedUrl = new httpurl(url);
			protocol = parsedUrl.protocol;
			username = parsedUrl.username;
			password = parsedUrl.password;
			hostname = parsedUrl.hostname;
			port = parsedUrl.port;
			pathname = parsedUrl.pathname;
			search = parsedUrl.search;
			hash = parsedUrl.hash;
			params = parsedUrl.params;
		})

		it('should parse protocol', function() {
			protocol.should.equal('http:');
		});

		it('should parse username', function() {
			username.should.equal('anotherUser');
		});

		it('should parse password', function() {
			password.should.equal('anotherPass');
		});

		it('should parse hostname', function() {
			hostname.should.equal('m.taobao.com');
		});

		it('should parse port', function() {
			port.should.equal('8086');
		});

		it('should parse pathname', function() {
			pathname.should.equal('/m/index.htm');
		});

		it('should parse search', function() {
			search.should.equal('?locate=icon-2&spm=a215s.7406091.1.icon-2&scm=2027.1.3.1001');
		});

		it('should parse hash', function() {
			hash.should.equal('#!all');
		});

		it('should parse params', function() {
			params.should.deep.equal({
				locate: 'icon-2',
				spm: 'a215s.7406091.1.icon-2',
				scm: '2027.1.3.1001'
			});
		});

		it('should serialized with toString', function() {
			parsedUrl.toString().should.equal(url);
		});

	});

});

describe('set url components', function() {
	
	var url = 'https://jhs.m.taobao.com/m/index.htm?locate=icon-2&spm=a215s.7406091.1.icon-2&scm=2027.1.3.1001#!all',
		parsedUrl = new httpurl(url),
		oldParams = clone(parsedUrl.params),
		oldSearch = parsedUrl.search,
		oldHash = parsedUrl.hash;

	it('should set params', function() {
		var prs = {
			locate: 'ican-1',
			spm: '123',
			scm: '1.1.1',
			a: 0,
			b: true,
			c: false,
			d: null,
			e: '',
			f: undefined
		};
		parsedUrl.params = prs;
		parsedUrl.params.should.deep.equal(prs);
		parsedUrl.search.should.equal('?locate=ican-1&spm=123&scm=1.1.1&a=0&b=true&c=false&d=null&e');
		parsedUrl.toString().should.equal(url.replace(/[?]([^?#]*)/, '?locate=ican-1&spm=123&scm=1.1.1&a=0&b=true&c=false&d=null&e'));
		parsedUrl.params = oldParams;
	});

	it('should not set params with none-object', function() {
		var prses = [0, 1, new Date(), 'a=11', /abc/gi, null, undefined];
		for (var i = 0, l = prses[i].length; i < l; i++) {
			parsedUrl.params = prses[i];
			parsedUrl.params.should.deep.equal(oldParams);
			parsedUrl.search.should.equal(oldSearch);
			parsedUrl.toString().should.equal(url);
			parsedUrl.params = oldParams;
		}
	});

	it('should set search with \'?locate=ican-3&spm=456&scm=2.2.2\'', function() {
		var search = '?locate=ican-3&spm=456&scm=2.2.2';
		parsedUrl.search = search;
		parsedUrl.search.should.equal(search);
		parsedUrl.params.should.deep.equal({
			locate: 'ican-3',
			spm: '456',
			scm: '2.2.2'
		});
		parsedUrl.toString().should.equal(url.replace(/[?]([^?#]*)/, search));
		parsedUrl.search = oldSearch;
	});

	it('should set search with \'locate=ican-3&spm=456&scm=2.2.2\'', function() {
		var search = 'locate=ican-3&spm=456&scm=2.2.2';
		parsedUrl.search = search;
		parsedUrl.search.should.equal('?' + search);
		parsedUrl.params.should.deep.equal({
			locate: 'ican-3',
			spm: '456',
			scm: '2.2.2'
		});
		parsedUrl.toString().should.equal(url.replace(/[?]([^?#]*)/, '?' + search));
		parsedUrl.search = oldSearch;
	});

	it('should not set search with none-string', function() {
		var searches = [0, 1, new Date(), /abc/gi, null, undefined];
		for (var i = 0, l = searches.length; i < l; i++) {
			parsedUrl.search = searches[i];
			parsedUrl.search.should.equal(oldSearch);
			parsedUrl.params.should.deep.equal(oldParams);
			parsedUrl.toString().should.equal(url);
			parsedUrl.search = oldSearch;
		}
	});

	it('should set hash with \'#new_hash\'', function() {
		var hash = '#new_hash';
		parsedUrl.hash = hash;
		parsedUrl.hash.should.equal(hash);
		parsedUrl.toString().should.equal(url.replace(/#[^#]*$/, hash));
		parsedUrl.hash = oldHash;
	});

	it('should set hash with \'new_hash\'', function() {
		var hash = 'new_hash';
		parsedUrl.hash = hash;
		parsedUrl.hash.should.equal('#' + hash);
		parsedUrl.toString().should.equal(url.replace(/#[^#]*$/, '#' + hash));
		parsedUrl.hash = oldHash;
	});

	it('should not set hash with none-string', function() {
		var hashes = [0, 1, new Date(), {a:'11'}, /abc/gi, null, undefined];
		for (var i = 0, l = hashes.length; i < l; i++) {
			parsedUrl.hash = hashes[i];
			parsedUrl.hash.should.equal(oldHash);
			parsedUrl.toString().should.equal(url);
			parsedUrl.hash = oldHash;
		}
	});

});
